What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository, a ,git file is created in the directory to contain the required information to track it later.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The statging area is simply the files to be connected to a commit once it is initialized. The staging area is good because changes can be temporaily set there until the user is ready to send the commit.

How can you use the staging area to make sure you have one commit per logical change?
	You can use diff to remind yourself what changes have been made since the last commit. Based on the response, you can determine if the commit should be submitted.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches would be helpful when planning for a future add-on/feature that may take time to develop. During development, a bug may have been discovered in the active version and you may need to revert to that branch to make the applicable changes.

How do the diagrams help you visualize the branch structure?
	Diagrams better explain which commits are available to each branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merging the two branches makes one cohesive version (branch) that elminates the need of the merged branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Just as it is done with Microsoft and other collaborating software, automatic merging can become a dangerous venture. Using a computer to guess the best options on what to keep and what to delete could cause the code to be filled with bugs. Manual merging can take a long amount of time and sometimes can be next to impossible without meeting with the other coder(s) to explain changes. 